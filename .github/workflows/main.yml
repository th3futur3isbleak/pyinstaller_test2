# Master YAML for Python packages

name: Main

# Controls when the action will run.
on:
    push:
        branches:
            - main

        # Allows you to run this workflow manually from the Actions tab
        workflow_dispatch:

env:
    PY_VERSION: 3.8
    # this is used for coverage testing and to define location of publish Sphinx documentation.
    PACKAGE_NAME: pyinstaller_test2

jobs:
    bootstrap_deps:
        name: bootstrap dependencies
        # The type of runner that the job will run on
        runs-on: windows-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            -   uses: actions/checkout@v2
            -   name: echo Github context
                env:
                    GITHUB_CONTEXT: ${{ toJson(github) }}
                run: |
                    echo -e "\033[31;1;4mDump GitHub context\033[0m"
                    echo -e "$GITHUB_CONTEXT\n"
                shell: bash
            -   name: Set up Python ${{ env.PY_VERSION }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ env.PY_VERSION }}

            -   name: Install Dependencies
                run: |
                    python -m pip install --upgrade pip
                    pip install setuptools wheel twine build
                    pip download .[testing,documentation] --dest ${{ runner.temp }}\packages

            -   name: Upload dependencies artifact
                uses: actions/upload-artifact@v2
                with:
                    name: packages
                    path: ${{ runner.temp }}\packages\
            -   name: List directory contents.
                run: Get-ChildItem ${{ runner.temp }}\packages\ â€“Recurse

    build:
        # this job is run off-premise to avoid potential conflicts with packages
        # installed by other Python workflows.  GitHub hosted runners create a
        # pristine environment with each run
        needs: bootstrap_deps
        runs-on: windows-latest

        steps:
            -   uses: actions/checkout@v1

            -   name: Set up Python ${{ env.PY_VERSION }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ env.PY_VERSION }}

            -   name: Download our packages
                uses: actions/download-artifact@v2
                with:
                    name: packages
                    path: ${{ runner.temp }}/packages/

            -   name: Install Dependencies
                run: |
                    python -m pip install --upgrade pip
                    pip install setuptools wheel twine build
                    pip install .[testing,documentation] --find-links ${{ runner.temp }}/packages

            -   name: Test with pytest
                run: |
                    pytest -m "not integration" tests --junitxml=junit/test-results.xml --cov=${{ env.PACKAGE_NAME }} --cov-report xml --cov-report html

            -   name: Create sdist and wheel
                run: |
                    python -m build

            -   name: Upload bdist and sdist artifacts
                uses: actions/upload-artifact@v2
                with:
                    name: dist
                    path: dist/

            -   name: Upload test coverage artifacts
                uses: actions/upload-artifact@v2
                with:
                    name: htmlcov
                    path: htmlcov/

            #      - name: Build HTML documentation (Windows)
            #        if: runner.os == 'Windows'
            #        run: |
            #          cd docs
            #          .\make.bat html
            #
            #      - name: Build HTML documentation (Linux)
            #        if: runner.os == 'Linux'
            #        run: |
            #          cd docs
            #          make html
            -   name: Env var test
                run: |
                    chcp 65001 #set code page to utf-8
                    echo ("BRANCH_NAME=" + $env:GITHUB_REF.replace('refs/heads/', '')) >> $env:GITHUB_ENV

            -   name: Env var test confirmation
                run: |
                    echo "${{ env.BRANCH_NAME }}"
                    echo $env:BRANCH_NAME

            -   name: Head tag test
                shell: bash
                run: |
                    echo "HEADTAG=$(git tag --points-at HEAD)" >> $GITHUB_ENV

            -   name: Head tag test confirmation
                run: |
                    echo "${{ env.HEADTAG}}"
                    echo $env:HEADTAG

            -   name: Get release suffix
                shell: bash
                run: |
                    RELEASE_SUFFIX=$(bash scripts/print_release_suffix.sh)
                    echo "::set-output name=release_suffix::$RELEASE_SUFFIX"
                    echo "Release suffix: $RELEASE_SUFFIX"
                    git log
                    git describe

            -   name: Build HTML documentation
                run: |
                    make docs
            -   name: Upload documentation artifact
                uses: actions/upload-artifact@v2
                with:
                    name: htmldoc
                    path: docs/_build/html/
    exe_build:
        needs: build
        runs-on: ${{ matrix.os }}
        name: Create Windows EXE using PyInstaller
        strategy:
            fail-fast: false
            matrix:
                os: [ windows-latest, ubuntu-latest, macos-latest ]
                include:
                    -   os: windows-latest
                        shell: 'cmd'
                    -   os: ubuntu-latest
                        shell: 'bash'
                    -   os: macos-latest
                        shell: 'bash'

        steps:
            -   uses: actions/checkout@v1
            -   name: Download bdist and sdist artifacts
                uses: actions/download-artifact@v2
                with:
                    name: dist
                    path: ${{ runner.temp }}\dist\
            -   name: List artifacts
                run: ls -l ${{ runner.temp }}\dist\

            -   name: Set up Python ${{ env.PY_VERSION }}
                if: contains(env.HEADTAG, 'v')
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ env.PY_VERSION }}
            -   name: Install Dependencies
                if: contains(env.HEADTAG, 'v')
                run: |
                    python -m pip install --upgrade pip
                    pip install setuptools wheel twine
            -   name: PyInstaller - Build EXE - Windows
                run: |
                    if: ${{matrix.shell}} == 'cmd'
                    scripts\windows\build_exe.bat ${{ runner.temp }}
            -   name: Archive Directories - Windows
                if: ${{matrix.shell}} == 'cmd'
                run: |
                    # Archive the directory that contains the bundled executable
                    7z a -tzip "${{ runner.temp }}\dist\bundles\show_version-bundle.zip" "${{ runner.temp }}\dist\bundles\show_version"
            -   name: Upload PyInstaller bundle
                if: ${{matrix.shell}} == 'cmd'
                uses: actions/upload-artifact@v2
                with:
                    name: show_version_bundle
                    path: '${{ runner.temp }}\dist\bundles\show_version-bundle.zip'
    release:
        needs: [build, exe_build]
        if: github.event_name == 'push' && github.ref_name == 'main'
        runs-on: windows-latest
        name: Create Release


        steps:
            -   uses: actions/checkout@v1

            -   name: Get Head Tag
                shell: bash
                run: |
                    echo "HEADTAG=$(git tag --points-at HEAD)" >> $GITHUB_ENV
            -   name: Download bdist and sdist artifacts
                if: contains(env.HEADTAG, 'v')
                uses: actions/download-artifact@v2
                with:
                    name: dist
                    path: ${{ runner.temp }}\dist\

            -   name: List artifacts
                if: contains(env.HEADTAG, 'v')
                run: ls -l ${{ runner.temp }}\dist\

            -   name: Set up Python ${{ env.PY_VERSION }}
                if: contains(env.HEADTAG, 'v')
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ env.PY_VERSION }}

            -   name: Install Dependencies
                if: contains(env.HEADTAG, 'v')
                run: |
                    python -m pip install --upgrade pip
                    pip install setuptools wheel twine

            -   name: Download documentation artifacts
                if: contains(env.HEADTAG, 'v')
                uses: actions/download-artifact@v2
                with:
                    name: htmldoc
                    path: html/


