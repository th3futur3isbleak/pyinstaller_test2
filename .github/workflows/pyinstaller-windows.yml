name: PyInstaller

on:
    push:
        branches:
            - main
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
# Set these environment variables for your project
env:
    PYINST_EXE_NAME: show_version
    SOURCE_PYTHON_FILE_PATH: show_version.py
    _PYTHON_VERSION: 3.8
    PACKAGE_NAME: pyinstaller_test2

jobs:
    build:
        runs-on: windows-latest
        steps:
            -   uses: actions/checkout@v1
            -   name: Set up Python ${{env._PYTHON_VERSION}}
                # Checkout the repository
                uses: actions/setup-python@v1
                with:
                    python-version: ${{env._PYTHON_VERSION}}
            -   name: Install dependencies
                # Install python dependencies
                # If the requirements.txt is in a different directory,
                # or if python setup.py is used, change accordingly
                run: |
                    python -m pip install --upgrade pip
                    # pip install -r requirements.txt
                    # pip install -r requirements_dev.txt
                    pip install .[testing,documentation]
            -   name: Pytest
                env:
                    PACKAGE_NAME: ${{env.PACKAGE_NAME}}
                run: |
                    # pytest tests --junitxml=test_results/junit/test-results.xml --json-report --json-report-file=test_results/pytest-reports/unit_tests.json --html=test_results/pytest-reports/unit_tests_report.html --self-contained-html --cov=pyinstaller_test tests/ --cov-report html:test_results/coverage/cov_html --cov-report xml:test_results/coverage/cov.xml --cov-report annotate:test_results/coverage/cov_annotate --cov=pyinstaller_test tests/
                    .github/workflows/run_pytest.bat
            -   name: Pylint
                run: |
                    pylint -r y --output test_results/pylint.txt --exit-zero ${{env.PACKAGE_NAME}}/
            -   name: Flake8
                run: |
                    flake8 --exit-zero ${{env.PACKAGE_NAME}}/ --tee --output test_results/flake8.txt
            -   name: Radon
                run: |
                    radon cc ${{env.PACKAGE_NAME}}/ > test_results/radon_cc.txt
                    # radon raw ${{env.PACKAGE_NAME}}/ > test_results/radon_raw.txt
                    # radon mi ${{env.PACKAGE_NAME}}/ > test_results/radon_mi.txt
                    # radon hal ${{env.PACKAGE_NAME}}/ > test_results/radon_hal.txt
            -   name: Build HTML documentation
                run: |
                    make docs
            -   name: List documentation files
                run: |
                    cmd /r dir /s docs\_build\html\
            -   name: Upload html documentation artifact
                uses: actions/upload-artifact@v2
                with:
                    name: htmldoc
                    path: docs\_build\html\
            -   name: Upload Pylint, Flake8, Radon testing artifact
                uses: actions/upload-artifact@v2
                with:
                    name: test_results
                    path: test_results\
            -   name: Get tag name
                id: get_version
                shell: pwsh
                run: |
                    echo "::set-output name=tag_name::$('${{ github.ref }}' -replace 'refs/\w+/(.*)','$1')"
            -   name: Echo tag name
                shell: pwsh
                run: |
                    echo "${{ steps.get_version.outputs.tag_name }}"
            -   name: Create GitHub release
                # Creates a Github release
                # These are numbered sequentially.  If a version tag is to be
                # used (v1.1.1, etc.) than this will need to be changed to
                # pull the git tags from the latest commit.
                id: create-new-release
                uses: actions/create-release@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    tag_name: ${{ github.run_number }}
                    release_name: Release ${{ github.run_number }}
            -   name: View Content 1 (debug)
                # Used to view files generated by this workflow.
                run: python .\.build_exe\list_files.py
            -   name: Pyinstaller Build EXE
                id: pyinstaller-build
                env:
                    SOURCE_PYTHON_FILE_PATH: ${{env.SOURCE_PYTHON_FILE_PATH}}
                    PYINST_EXE_NAME: ${{env.PYINST_EXE_NAME}}
                run: |
                    # Note, if only one type of build is desired, one of these steps can be removed
                    # and the assocciated upload step can be removed.

                    # Builds EXE in a directory with associated library files visible to end user
                    .\.build_exe\build_exe.bat

                    # Builds EXE in a directory in a single large file
                    .\.build_exe\build_exe_onefile.bat
            -   name: View content 2 (debug)
                # Used to view files generated by this workflow.
                run: python .\.build_exe\list_files.py
            -   name: Archive Directories
                run: |
                    # Archive directory with EXE and library files
                    7z a -tzip ".\.build_exe\${{env.PYINST_EXE_NAME}}.zip" ".\.build_exe\dist\${{env.PYINST_EXE_NAME}}"
                    # List the contents of the directory archive.
                    7z l ".\.build_exe\${{env.PYINST_EXE_NAME}}.zip"
                    # Archive the directory that contains the bundled EXE
                    7z a -tzip ".\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}-bundle.zip" ".\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}"
                    # List the contents of the archive with the bundled EXE.
                    7z l ".\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}-bundle.zip"
            -   name: View content 3 (debug)
                # Used to view files generated by this workflow.
                run: python .\.build_exe\list_files.py
            -   name: Upload EXE Directory Release Asset
                # Uploads the ZIP file with the EXE and the associated files.
                uses: actions/upload-release-asset@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    upload_url: ${{ steps.create-new-release.outputs.upload_url }}
                    asset_path: .\.build_exe\${{env.PYINST_EXE_NAME}}.zip
                    asset_name: ${{env.PYINST_EXE_NAME}}-v${{ github.run_number }}.zip
                    asset_content_type: application/zip
            -   name: Upload Bundled EXE (pyinstaller --onefile) Release Asset
                # Uploads the ZIP file with the bundled EXE and any associated files.
                uses: actions/upload-release-asset@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    upload_url: ${{ steps.create-new-release.outputs.upload_url }}
                    asset_path: .\.build_exe\dist\bundles\${{env.PYINST_EXE_NAME}}-bundle.zip
                    asset_name: ${{env.PYINST_EXE_NAME}}-bundle-v${{ github.run_number }}.zip
                    asset_content_type: application/zip

